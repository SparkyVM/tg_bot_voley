import asyncio
from create_bot import bot, dp, admins
from data_base.base import create_tables
from aiogram.types import BotCommand, BotCommandScopeDefault
from handlers.start_router import start_router
from handlers.location.show_location_router import show_loc_router
from handlers.news.show_news_router import show_news_router
from handlers.about.show_info import show_info_router
from handlers.reserve.show_reserves_router import show_reserves_router


async def set_commands():
    """–§—É–Ω–∫—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–∞–Ω–¥–Ω–æ–≥–æ –º–µ–Ω—é. –î–µ—Ñ–æ–ª—Ç–Ω–æ–µ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    commands = [BotCommand(command='start', description='–°—Ç–∞—Ä—Ç')]
    await bot.set_my_commands(commands, BotCommandScopeDefault())


async def start_bot():
    """–§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è –∫–æ–≥–¥–∞ –±–æ—Ç –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è"""
    await set_commands()
    await create_tables()
    for admin_id in admins:
        try:
            await bot.send_message(admin_id, '–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω ü•≥')
        except:
            pass


async def stop_bot():
    """–§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è –∫–æ–≥–¥–∞ –±–æ—Ç –∑–∞–≤–µ—Ä—à–∏—Ç —Å–≤–æ—é —Ä–∞–±–æ—Ç—É"""
    try:
        for admin_id in admins:
            await bot.send_message(admin_id, '–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω üòî')
    except:
        pass


async def main():
    # —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–æ–≤
    dp.include_router(start_router)
    dp.include_router(show_loc_router)
    dp.include_router(show_news_router)
    dp.include_router(show_info_router)
    dp.include_router(show_reserves_router)

    # —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–π
    dp.startup.register(start_bot)
    dp.shutdown.register(stop_bot)

    # –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ long polling –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç –æ—á–∏—â–∞–µ—Ç –≤—Å–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –∑–∞ –µ–≥–æ –º–æ–º–µ–Ω—Ç—ã –±–µ–∑–¥–µ–π—Å—Ç–≤–∏—è
    try:
        await bot.delete_webhook(drop_pending_updates=True)
        await dp.start_polling(bot, allowed_updates=dp.resolve_used_update_types())
    finally:
        await bot.session.close()


if __name__ == "__main__":
    asyncio.run(main())