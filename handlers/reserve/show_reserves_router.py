from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, CallbackQuery

from create_bot import bot
from data_base.dao import get_reserves_by_user, get_locations, get_courts
from utils.utils import send_reserves, send_courts

from keyboards.reply_menu_kb import main_kb
from keyboards.reply_reserve_kb import start_res1
from keyboards.gen_other_kb import generate_locations_keyboard

show_reserves_router = Router()


class FindReservesStates(StatesGroup):
    text = State()  # –û–∂–∏–¥–∞–µ–º –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è


@show_reserves_router.message(F.text == '/–±—Ä–æ–Ω—å')
async def start_views_reserves(message: Message, state: FSMContext):
    await state.clear()
    await message.answer('–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=start_res1())

@show_reserves_router.message(F.text == 'üìã –í—ã–≤–µ—Å—Ç–∏ –±—Ä–æ–Ω–∏')
async def find_all_reserves(message: Message, state: FSMContext):
    await state.clear()
    all_reserves = await get_reserves_by_user(user_id=message.from_user.id)
    if all_reserves:
        await send_reserves(all_reserves, bot, message.from_user.id)
        await message.answer(f'–í—Å–µ –≤–∞—à–∏ {len(all_reserves)} –∑–∞–º–µ—Ç–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!', reply_markup=main_kb())
    else:
        await message.answer('–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π –±—Ä–æ–Ω–∏!', reply_markup=main_kb())

@show_reserves_router.message(F.text == 'üìù –ó–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞—Ç—å')
async def send_reserve_loc(message: Message, state: FSMContext):
    """–§—É–Ω–∫—Ü–∏—è –≤—ã–≤–æ–¥–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–π"""
    await state.clear()
    all_locations = await get_locations()       # –ø–æ–ª—É—á–∏—Ç—å –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
    if all_locations:
        await message.answer('–í—ã–±–µ—Ä–∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∫–æ—Ä—Ç–∞:', reply_markup=generate_locations_keyboard(all_locations))
    else:
        await message.answer('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–π', reply_markup=main_kb())

@show_reserves_router.callback_query(F.data.startswith('select_loc_'))
async def send_reserve_court(call: CallbackQuery, state: FSMContext):
    """–§—É–Ω–∫—Ü–∏—è –≤—ã–≤–æ–¥–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ—Ä—Ç–æ–≤"""
    await call.answer()
    await state.clear()
    sel_loc = call.data.replace('select_loc_', '')
    sel_courts = await get_courts(loc_name=sel_loc)
    if sel_courts:
        await send_courts(bot, user_id=call.from_user.id, all_courts=sel_courts)

'''
@show_reserves_router.callback_query(F.data.startswith('select_court_'))
async def send_reserve_time(call: CallbackQuery, state: FSMContext):
    """–§—É–Ω–∫—Ü–∏—è –≤—ã–≤–æ–¥–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ—Ä—Ç–æ–≤"""
    await call.answer()
    await state.clear()
    sel_loc = call.data.replace('select_loc_', '')
    sel_courts = await get_courts(loc_name=sel_loc)
    if sel_courts:
        await send_courts(bot, user_id=call.from_user.id, all_courts=sel_courts)
    all_courts = await get_courts()  # –ø–æ–ª—É—á–∏—Ç—å –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
    if all_courts:
        await message.answer('–í—ã–±–µ—Ä–∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∫–æ—Ä—Ç–∞:', reply_markup=generate_locations_keyboard(all_locations))
    else:
        await message.answer('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–π', reply_markup=main_kb())
'''



'''
@show_reserves_router.message(F.text == '/–±—Ä–æ–Ω—å')
async def show_all_reserves(message: Message, state: FSMContext):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –ù–æ–≤–æ—Å—Ç–µ–π"""
    await state.clear()
    all_news = await get_news()
    if all_news:
        await message.answer('–ù–æ–≤–æ—Å—Ç–∏:', reply_markup=generate_news_keyboard(all_news))
    else:
        await message.answer('–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è!', reply_markup=main_kb())


@show_news_router.callback_query(F.data.startswith('select_post_'))
async def show_select_post(call: CallbackQuery, state: FSMContext):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –°—Ç–∞—Ç—å–∏"""
    await call.answer()
    await state.clear()
    sel_title = call.data.replace('select_post_', '')
    sel_post = await get_post(post_title=sel_title)
    if sel_post:
        await send_post(bot, user_id=call.from_user.id, all_news=sel_post)


'''
